/**************************************************************
 * $Revision: 55149 $:
 * $Author: jannarong.wadthong $:
 * $Date: 2016-05-11 18:32:03 +0700 (Wed, 11 May 2016) $:
 * $HeadURL: https://svn03.rapid4cloud.com/svn/a/dev/rapidesuite/programs/2.2.1/client/src/com/rapidesuite/build/gui/panels/InjectorsPackageSelectionPanel.java $:
 * $Id: InjectorsPackageSelectionPanel.java 55149 2016-05-11 11:32:03Z jannarong.wadthong $:
 **************************************************************/
package com.rapidesuite.build.gui.panels;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import org.apache.poi.util.IOUtils;

import com.rapidesuite.build.BuildMain;
import com.rapidesuite.build.SwiftBuildConstants;
import com.rapidesuite.build.gui.apigrid.APIDataGridUtils;
import com.rapidesuite.build.gui.frames.InjectorsPackageSplitterFrame;
import com.rapidesuite.build.utils.InjectorsPackageUtils;
import com.rapidesuite.client.common.gui.CustomFileFilter;
import com.rapidesuite.client.common.gui.PLSQLPackageValidationPanel;
import com.rapidesuite.client.common.util.Config;
import com.rapidesuite.client.common.util.FileUtils;
import com.rapidesuite.client.common.util.GUIUtils;
import com.rapidesuite.client.common.util.Utils;
import com.rapidesuite.client.common.util.UtilsConstants;
import com.rapidesuite.configurator.client.SharedUtil.ControlDataType;
import com.rapidesuite.core.CoreConstants;
import com.rapidesuite.core.utility.CoreUtil;

@SuppressWarnings("serial")
public class InjectorsPackageSelectionPanel extends JPanel
{

	BuildMain BuildMain;
	private File injectorsPackageFile;
	private JFileChooser injectorsPackageFileChooser;
	private JFileChooser saveFileChooser;
	private JLabel messageLabel;
	private InjectorsPackageSplitterFrame injectorsPackageSplitterFrame;

	private JButton injectorsPackageFileSelectionButton;
	private JButton previousButton;
	private JButton nextButton;
	private JTextField injectorsPackageFileLocationInput;
	private JButton injectorsPackageSplitButton;

	private JLabel projectNameLabel;
	private JLabel filtersLabel;
	private JLabel serverNameLabel;
	private JLabel generatedByLabel;
	private JLabel generatedOnLabel;
	private JLabel scenarioNameLabel;
	private JLabel profileNameLabel;
	private JLabel injectorsCountLabel;

	private JTextField projectNameValue;
	private JTextField filtersValue;
	private JTextField serverNameValue;
	private JTextField generatedByValue;
	private JTextField generatedOnValue;
	private JTextField scenarioNameValue;
	private JTextField profileNameValue;
	private JTextField injectorsCountValue;

	private JPanel northPanel;
	private JPanel centerPanel;
	private JPanel southPanel;

	private PLSQLPackageValidationPanel plsqlPackageValidationPanel;

	boolean isRedisplayScriptsTable;
	private boolean hasDefaultInjectorsPackageFile;

	public InjectorsPackageSelectionPanel(BuildMain BuildMain) throws Exception
	{
		this.BuildMain = BuildMain;
		createComponents();
	}

	private void createComponents() throws Exception
	{
		injectorsPackageSplitterFrame = new InjectorsPackageSplitterFrame(BuildMain);

		messageLabel = GUIUtils.getLabel("", true);
		messageLabel.setFont(GUIUtils.BOLD_SYSTEM_FONT);
		projectNameLabel = GUIUtils.getLabel("Project name:", true);
		filtersLabel = GUIUtils.getLabel("Labels:", true);
		serverNameLabel = GUIUtils.getLabel("Server name:", true);
		generatedByLabel = GUIUtils.getLabel("Generated by:", true);
		generatedOnLabel = GUIUtils.getLabel("Generated on:", true);
		scenarioNameLabel = GUIUtils.getLabel("Scenario name:", true);
		profileNameLabel = GUIUtils.getLabel("Profile name:", true);
		injectorsCountLabel = GUIUtils.getLabel("Injectors count:", true);

		Color inputFieldBackgroundColor = new Color(236, 233, 216);
		projectNameValue = GUIUtils.getInputField(true, false);
		projectNameValue.setBackground(inputFieldBackgroundColor);
		filtersValue = GUIUtils.getInputField(true, false);
		filtersValue.setBackground(inputFieldBackgroundColor);
		serverNameValue = GUIUtils.getInputField(true, false);
		serverNameValue.setBackground(inputFieldBackgroundColor);
		generatedByValue = GUIUtils.getInputField(true, false);
		generatedByValue.setBackground(inputFieldBackgroundColor);
		generatedOnValue = GUIUtils.getInputField(true, false);
		generatedOnValue.setBackground(inputFieldBackgroundColor);
		scenarioNameValue = GUIUtils.getInputField(true, false);
		scenarioNameValue.setBackground(inputFieldBackgroundColor);
		profileNameValue = GUIUtils.getInputField(true, false);
		profileNameValue.setBackground(inputFieldBackgroundColor);
		injectorsCountValue = GUIUtils.getInputField(true, false);
		injectorsCountValue.setBackground(inputFieldBackgroundColor);

		injectorsPackageFileLocationInput = GUIUtils.getInputField(true, true);
		injectorsPackageFileSelectionButton = GUIUtils.getButton(BuildMain.getClass(), "Browse", "/images/open16.gif");
		injectorsPackageFileSelectionButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					openInjectorsPackageFileChooser();
				}
				catch ( Exception ex )
				{
					FileUtils.printStackTrace(ex);
				}
			}
		});

		injectorsPackageSplitButton = GUIUtils.getButton(BuildMain.getClass(), "Split Injectors", null);
		GUIUtils.setComponentDimension(injectorsPackageSplitButton, 100, 22);
		injectorsPackageSplitButton.setEnabled(false);
		injectorsPackageSplitButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					splitInjectors();
				}
				catch ( Exception ex )
				{
					FileUtils.printStackTrace(ex);
				}
			}
		});

		this.setLayout(new BorderLayout());
		this.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

		northPanel = new JPanel();
		northPanel.setLayout(new BorderLayout());
		this.add(northPanel, BorderLayout.NORTH);

		centerPanel = new JPanel();
		// centerPanel.setBackground(Color.GREEN);
		centerPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Injectors Package selection"), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));
		this.add(centerPanel, BorderLayout.CENTER);

		JPanel tempPanel = new JPanel();
		tempPanel.setLayout(new BoxLayout(tempPanel, BoxLayout.X_AXIS));
		centerPanel.add(tempPanel);
		tempPanel.add(GUIUtils.getLabel("Select the package:", true));
		tempPanel.add(Box.createRigidArea(new Dimension(15, 5)));
		GUIUtils.setComponentDimension(injectorsPackageFileLocationInput, 300, 25);
		tempPanel.add(injectorsPackageFileLocationInput);
		tempPanel.add(Box.createRigidArea(new Dimension(15, 5)));
		tempPanel.add(injectorsPackageFileSelectionButton);

		tempPanel = new JPanel();
		centerPanel.add(tempPanel);
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.insets = new Insets(3, 3, 3, 3); // put spacing around this field.
		GridBagLayout gl = new GridBagLayout();
		tempPanel.setLayout(gl);
		GUIUtils.setComponentDimension(projectNameLabel, 100, 22);
		GUIUtils.setComponentDimension(projectNameValue, 200, 22);
		int fill = GridBagConstraints.HORIZONTAL;
		addConstraintToPanel(gl, gbc, tempPanel, projectNameLabel, 0, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, projectNameValue, 0, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, filtersLabel, 1, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, filtersValue, 1, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, serverNameLabel, 2, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, serverNameValue, 2, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, generatedByLabel, 3, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, generatedByValue, 3, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, generatedOnLabel, 4, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, generatedOnValue, 4, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, scenarioNameLabel, 5, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, scenarioNameValue, 5, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, profileNameLabel, 6, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, profileNameValue, 6, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, injectorsCountLabel, 7, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, injectorsCountValue, 7, 1, fill);
		addConstraintToPanel(gl, gbc, tempPanel, new JLabel(), 8, 0, fill);
		addConstraintToPanel(gl, gbc, tempPanel, injectorsPackageSplitButton, 8, 1, GridBagConstraints.NONE);

		tempPanel = new JPanel();
		tempPanel.setLayout(new BoxLayout(tempPanel, BoxLayout.X_AXIS));
		tempPanel.setBorder(BorderFactory.createEmptyBorder(0, 80, 0, 0));
		tempPanel.add(messageLabel);
		tempPanel.add(Box.createHorizontalGlue());
		centerPanel.add(tempPanel);

		plsqlPackageValidationPanel = new PLSQLPackageValidationPanel(this.BuildMain);
		plsqlPackageValidationPanel.setVisible(false);
		tempPanel = new JPanel();
		tempPanel.setLayout(new BoxLayout(tempPanel, BoxLayout.X_AXIS));
		tempPanel.setBorder(BorderFactory.createEmptyBorder(10, 80, 0, 0));
		tempPanel.add(plsqlPackageValidationPanel);
		tempPanel.add(Box.createHorizontalGlue());
		centerPanel.add(tempPanel);

		previousButton = GUIUtils.getButton(BuildMain.getClass(), "Previous", SwiftBuildConstants.IMAGE_BACK);
		previousButton.setEnabled(true);
		previousButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					BuildMain.switchToPanel(SwiftBuildConstants.PANEL_ENVIRONMENT_VALIDATION);
					BuildMain.clearAndHideInformationLabelText(BuildMain.getBweNameLabelIndex());
				}
				catch ( Exception ex )
				{
					FileUtils.printStackTrace(ex);
				}
			}
		});

		nextButton = GUIUtils.getButton(BuildMain.getClass(), "Next", SwiftBuildConstants.IMAGE_NEXT);
		nextButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				//bwp selection window
				next();
			}
		});

		southPanel = new JPanel();
		// southPanel.setBackground(Color.BLUE);
		southPanel.setBorder(BorderFactory.createEmptyBorder(5, 0, 10, 0));
		southPanel.setLayout(new BoxLayout(southPanel, BoxLayout.Y_AXIS));
		this.add(southPanel, BorderLayout.SOUTH);

		tempPanel = new JPanel();
		tempPanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 10, 10));
		tempPanel.setLayout(new BoxLayout(tempPanel, BoxLayout.X_AXIS));
		tempPanel.add(previousButton);
		southPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		tempPanel.add(nextButton);
		southPanel.add(tempPanel);

		nextButton.setEnabled(false);

		injectorsPackageFileChooser = Utils.initializeJFileChooserWithTheLastPath("INJECTORS_PACKAGE_FILE_CHOOSER_INJECTORS_PACKAGE_SELECTION_PANEL");
		CustomFileFilter filter = new CustomFileFilter(SwiftBuildConstants.INJECTORS_PACKAGE_FILE_EXTENSION);
		injectorsPackageFileChooser.setFileFilter(filter);
		saveFileChooser = Utils.initializeJFileChooserWithTheLastPath("SAVE_FILE_CHOOSER_INJECTORS_PACKAGE_SELECTION_PANEL");
		filter = new CustomFileFilter(SwiftBuildConstants.INJECTORS_PACKAGE_FILE_EXTENSION);
		saveFileChooser.setFileFilter(filter);

		injectorsPackageFile = Config.getBuildInjectorsPackageFile();

		if(injectorsPackageFile != null) {
			hasDefaultInjectorsPackageFile = true;
		}
	}

	public JLabel getMessageLabel()
	{
		return messageLabel;
	}

	public void openInjectorsPackageFileChooser() throws Exception
	{
		String injectorsPackageFileLocation = injectorsPackageFileLocationInput.getText();
		if ( injectorsPackageFileLocation != null && !injectorsPackageFileLocation.equals("") )
		{
			injectorsPackageFile = new File(injectorsPackageFileLocation);
			injectorsPackageFileChooser.setSelectedFile(injectorsPackageFile);
		}
		else
		{
			injectorsPackageFileChooser.setSelectedFile(null);
		}

		int returnVal = injectorsPackageFileChooser.showDialog(this, "Open");
		if ( returnVal == JFileChooser.APPROVE_OPTION )
		{
			injectorsPackageFile = injectorsPackageFileChooser.getSelectedFile();
			loadInjectorsPackage();
		}
	}

	public void next()
	{
		try
		{
			logBwpInformation();

			if ( isRedisplayScriptsTable )
			{
				isRedisplayScriptsTable = false;
				BuildMain.getInjectorsExecutionPanel().intializeInjectorsTable();
			}
			if (BuildMain.getInjectorsPackageSelectionPanel().getInjectorsPackageFile() != null) {
				BuildMain.setInformationLabelText(BuildMain.getInjectorsPackageSelectionPanel().getInjectorsPackageFile().getName(), BuildMain.getBwpNameLabelIndex());
			}
			BuildMain.switchToPanel(SwiftBuildConstants.PANEL_INJECTORS_PACKAGE_EXECUTION);
		}
		catch ( Exception ex )
		{
			FileUtils.printStackTrace(ex);
		}
	}

    private void logBwpInformation() throws Exception
    {
        final Set<String> interestingPropertiesKeyPrefix = new HashSet<String>(Arrays.asList(new String[] {
        												CoreConstants.SPECIFICATION_PROFILE_NAME,
        												CoreConstants.SPECIFICATION_GENERATED_BY,
        												CoreConstants.SPECIFICATION_SCENARIO_NAME,
        												CoreConstants.SPECIFICATION_FILTERS,
        												CoreConstants.SPECIFICATION_GENERATED_ON,
        												CoreConstants.SPECIFICATION_SERVER_NAME,
        												CoreConstants.SPECIFICATION_PROJECT_NAME,
        												CoreConstants.SPECIFICATION_GENERATION_ID,
        												CoreConstants.SPECIFICATION_INJECTOR_NAME,
        												CoreConstants.SPECIFICATION_INJECTOR_COUNT,
        												CoreConstants.SPECIFICATION_INJECTOR_API_PREFIX}));

        Map<String, String> properties = InjectorsPackageUtils.getSpecificationProperties(injectorsPackageFile);
        FileUtils.println("Loaded BWP file: "+injectorsPackageFile.getAbsolutePath());
        FileUtils.println(injectorsPackageFile.getName()+"'s properties:");

        for (Map.Entry<String, String> entry : properties.entrySet()) {
        	for (String interestingKeyPrefix : interestingPropertiesKeyPrefix) {
        		if (entry.getKey().startsWith(interestingKeyPrefix)) {
        			FileUtils.println("\t"+entry.getKey()+"="+entry.getValue());
        			break;
        		}
        	}
        }
    }

	public void loadInjectorsPackage()
	{
		if ( injectorsPackageFile != null )
		{
			loadInjectorsPackage(injectorsPackageFile);
		}
	}

	private void loadInjectorsPackage(final File file)
	{
		nextButton.setEnabled(false);
		messageLabel.setVisible(false);
		GUIUtils.resetLabel(messageLabel);
		injectorsPackageFileLocationInput.setText(file.getAbsolutePath());
		Runnable r = new Runnable()
		{
			public void run()
			{
				try
				{
					Map<String, String> properties = InjectorsPackageUtils.getSpecificationProperties(file);
					setPackageContent(properties);
					messageLabel.setVisible(true);
					isRedisplayScriptsTable = true;
					injectorsPackageSplitButton.setEnabled(true);
					File injectorsPackageFile = BuildMain.getInjectorsPackageSelectionPanel().getInjectorsPackageFile();

					BuildMain.getInjectorsExecutionPanel().setInjectors(InjectorsPackageUtils.getInjectors(injectorsPackageFile));

					if ( InjectorsPackageUtils.hasAtLeastOneAPIInjectorType(properties) )
					{
						APIDataGridUtils.unpackAPIDataFiles(injectorsPackageFile,
								BuildMain.getInjectorsExecutionPanel().getInjectors(),
								BuildMain.getInjectorsPackageSelectionPanel().getMessageLabel());
						plsqlPackageValidationPanel.setVisible(true);


						File controlFolder = new File(Config.getTempFolder(), CoreConstants.CONTROL_OUTPUT_FOLDER_NAME);
						InjectorsPackageSelectionPanel.this.dataMigrationSqlFolder = new File(controlFolder, ControlDataType.DATA_MIGRATION_PACKAGES.getControlDataDirectoryNameAsAllLowercase());
						List<String> zipPaths = InjectorsPackageUtils.getEntryListFromEncryptedZIPFile(injectorsPackageFile);
                        InjectorsPackageSelectionPanel.this.packageNameToFileMap = new HashMap<String,File>();
                        String prefix = CoreConstants.CONTROL_OUTPUT_FOLDER_NAME + UtilsConstants.FORWARD_SLASH +
                                ControlDataType.DATA_MIGRATION_PACKAGES.getControlDataDirectoryNameAsAllLowercase() + UtilsConstants.FORWARD_SLASH;
						for ( String zipPath : zipPaths )
						{
						    zipPath = CoreUtil.normalizePathSeparators(zipPath);
						    if ( zipPath.startsWith(prefix) )
						    {
						        String filename = zipPath.substring(prefix.length());
						        InputStream is = null;
						        try
						        {
						        		is = InjectorsPackageUtils.getInputStreamFromEncryptedZIPFile(injectorsPackageFile, zipPath);
	                                byte[] data = IOUtils.toByteArray(is);
	                                File controlFile = new File(dataMigrationSqlFolder, filename);
                                    org.apache.commons.io.FileUtils.writeByteArrayToFile(controlFile, data);
                                    if ( CoreConstants.isSqlPackageFileName(controlFile.getAbsolutePath()) )
                                    {
                                        packageNameToFileMap.put(CoreUtil.getFileNameWithoutExtension(controlFile), controlFile);
                                    }
						        }
						        finally
						        {
						            IOUtils.closeQuietly(is);
						        }
						    }
						}

						plsqlPackageValidationPanel.installPLSQLPackage(InjectorsPackageSelectionPanel.this.BuildMain.getEnvironmentPropertiesMap(),
						        packageNameToFileMap,
						        InjectorsPackageSelectionPanel.this.BuildMain.getReplacementsProperties(),
						        false);
					}
					else
					{
						plsqlPackageValidationPanel.setVisible(false);
					}

					if ( !InjectorsPackageUtils.hasAtLeastOneAPIInjectorType(properties) || plsqlPackageValidationPanel.isPLSQLPackageValid() )
					{
	                    nextButton.setEnabled(true);
	                    GUIUtils.showSuccessMessage(messageLabel, "Valid Package, please click Next.");
	                    if ( hasDefaultInjectorsPackageFile )
	                    {
	                        next();
	                    }
					}
				}
				catch ( Throwable e )
				{
					FileUtils.printStackTrace(e);
					messageLabel.setVisible(true);
					GUIUtils.showErrorMessage(messageLabel, CoreUtil.getAllThrowableMessages(e));
				}
			}
		};

		Thread t = new Thread(r);
		t.start();
		if (Config.isAutomatedRun()) {
			try {
				t.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
				FileUtils.printStackTrace(e);
			}
		}

	}

	private void setPackageContent(Map<String, String> properties) throws Exception
	{
		projectNameValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_PROJECT_NAME));
		filtersValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_FILTERS));
		serverNameValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_SERVER_NAME));
		generatedByValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_GENERATED_BY));
		generatedOnValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_GENERATED_ON));

		String name = InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_SCENARIO_NAME);
		if ( name == null )
		{
			scenarioNameValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_INJECTOR_NAME));
		}
		else
		{
			scenarioNameValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_SCENARIO_NAME));
		}
		profileNameValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_PROFILE_NAME));
		injectorsCountValue.setText(InjectorsPackageUtils.getProperty(properties, CoreConstants.SPECIFICATION_INJECTOR_COUNT));
	}

	public void splitInjectors() throws Exception
	{
		injectorsPackageSplitterFrame.setupTableScripts();
		injectorsPackageSplitterFrame.setVisible(true);
	}

	public File getInjectorsPackageFile()
	{
		return injectorsPackageFile;
	}


	public JButton getNextButton()
	{
		return nextButton;
	}

	public BuildMain getBuildMain()
	{
		return BuildMain;
	}

	public boolean hasDefaultInjectorsPackageFile()
	{
		return hasDefaultInjectorsPackageFile;
	}

	public static void addConstraintToPanel(GridBagLayout gl, GridBagConstraints gbc, JPanel panel, JComponent component, int row, int column, int fill)
	{
		GUIUtils.setGridBagConstraints(gbc, row, column, 1, 1, fill);
		gl.setConstraints(component, gbc);
		panel.add(component);
	}

	private File dataMigrationSqlFolder = null;
	public File getUnpackedBwpFolder()
	{
	    return this.dataMigrationSqlFolder;
	}

	private Map<String,File> packageNameToFileMap = null;
	public Map<String,File> getPackageNameToFileMap()
	{
	    return this.packageNameToFileMap;
	}

}
